// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  OFFICE
  AGRICULTURAL
  RECREATIONAL
  VACANT_LAND
  MISCELLANEOUS
  EXEMPT
}

enum PermitType {
  ADDITION
  ADU
  BATHROOM
  BATTERY
  BUILDING
  DEMOLITION
  ELECTRIC_METER
  ELECTRICAL
  EV_CHARGER
  FIRE_SPRINKLER
  GAS
  GENERATOR
  GRADING
  HEAT_PUMP
  HVAC
  KITCHEN
  MECHANICAL
  NEW_CONSTRUCTION
  PLUMBING
  POOL_AND_HOT_TUB
  REMODEL
  ROOFING
  SOLAR
  WATER_HEATER
  OTHER
}

enum PermitStatus {
  UNKNOWN
  IN_REVIEW
  ISSUED
  INACTIVE
}

enum City {
  LOS_GATOS
  SARATOGA
  SANTA_CLARA
  CUPERTINO
  PALO_ALTO
  LOS_ALTOS_HILLS
  SUNNYVALE
}

enum SubscriptionPlan {
  FREEMIUM
  PREMIUM
}

// Business type per CSLB
enum ContractorBusinessType {
  SOLE_OWNER
  CORPORATION
  PARTNERSHIP
  LIMITED_LIABILITY
  OTHER
}

// CSLB License Classifications (subset incl. those in sample and official list)
// Source: https://www.cslb.ca.gov/About_Us/Library/Licensing_Classifications/
enum CSLBClassification {
  A
  B
  B2
  C2
  C4
  C5
  C6
  C7
  C8
  C9
  C10
  C11
  C12
  C13
  C15
  C16
  C17
  C20
  C21
  C22
  C23
  C27
  C28
  C29
  C31
  C32
  C33
  C34
  C35
  C36
  C38
  C39
  C42
  C43
  C45
  C46
  C47
  C49
  C50
  C51
  C53
  C54
  C55
  C57
  C60
  C61
  D12
  D16
  D28
  D29
  D35
  D49
  D52
  D60
  D65
}

// User model - stores authentication and subscription info
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth accounts (supports multiple providers: Google, LinkedIn, etc.)
  accounts      Account[]

  // Subscription info
  subscription  Subscription?

  @@index([email])
}

// NextAuth Account model - supports multiple auth providers per user
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Note: Using JWT sessions (stored in cookies) - no Session table needed

// Subscription model - tracks user's plan (freemium vs premium)
model Subscription {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  plan            SubscriptionPlan @default(FREEMIUM)
  
  // Subscription period - user has premium access until this date
  // null = freemium (permanent)
  // future date = premium access until that date
  // past date = expired (back to freemium)
  validUntil      DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Permit model - stores scraped permit information
model Permit {
  id              String   @id @default(cuid())
  
  // Basic info
  permitNumber    String   @unique
  title           String?
  description     String?
  
  // Location
  address         String?
  city            City?
  state           String?
  zipCode         String?
  
  // Details
  propertyType    PropertyType?
  permitType      PermitType?
  status          PermitStatus?
  value           Float?
  
  // Dates
  appliedDate      DateTime?
  appliedDateString String?  // Store original date format (e.g., "10/27/2025")
  expirationDate   DateTime?
  
  // Scraping metadata
  sourceUrl       String?
  scrapedAt       DateTime @default(now())
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  contractors     PermitContractor[]

  @@index([permitNumber])
  @@index([city])
  @@index([permitType])
  @@index([appliedDate])
}

// Contractor model - stores licensing, bonding, and compliance data from CSLB CSV
model Contractor {
  id               String   @id @default(cuid())

  // Core identification
  licenseNo        String   @unique
  name             String?  // prefer FullBusinessName or BusinessName

  // Contact and address
  mailingAddress   String?
  city             String?
  state            String?
  zipCode          String?
  phone            String?

  // Business info
  businessType     ContractorBusinessType?
  classifications  ContractorClassification[]

  // Key dates
  issueDate        DateTime?
  

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([licenseNo])
  @@index([city])

  // Relations
  permits          PermitContractor[]
}

// Join table for many classifications per contractor (SQLite-friendly)
model ContractorClassification {
  id             String              @id @default(cuid())
  contractorId   String
  contractor     Contractor          @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  classification CSLBClassification

  @@unique([contractorId, classification])
  @@index([classification])
}

// Join table: many-to-many between Permit and Contractor
model PermitContractor {
  id            String      @id @default(cuid())
  permitId      String
  contractorId  String
  role          String?     // Optional: general, prime, sub, etc.

  permit        Permit      @relation(fields: [permitId], references: [id], onDelete: Cascade)
  contractor    Contractor  @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@unique([permitId, contractorId])
  @@index([contractorId])
}

