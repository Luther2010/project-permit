// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum PermitType {
  BUILDING
  ELECTRICAL
  PLUMBING
  MECHANICAL
  ROOFING
  DEMOLITION
  OTHER
}

enum PermitStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  APPROVED
  ISSUED
  EXPIRED
  REVOKED
  CANCELLED
}

// User model - stores authentication and subscription info
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth accounts (supports multiple providers: Google, LinkedIn, etc.)
  accounts      Account[]

  // Subscription info
  subscription  Subscription?

  @@index([email])
}

// NextAuth Account model - supports multiple auth providers per user
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Note: Using JWT sessions (stored in cookies) - no Session table needed

// Subscription model - tracks user's plan (freemium vs premium)
model Subscription {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  status          String   @default("freemium") // freemium | premium | cancelled
  
  // Stripe fields
  stripeCustomerId String? @unique
  stripeSubscriptionId String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Permit model - stores scraped permit information
model Permit {
  id              String   @id @default(cuid())
  
  // Basic info
  permitNumber    String   @unique
  title           String?
  description     String?
  
  // Location
  address         String?
  city            String?
  state           String?
  zipCode         String?
  
  // Details
  permitType      PermitType?
  status          PermitStatus?
  value           Float?
  
  // Dates
  issuedDate      DateTime?
  expirationDate  DateTime?
  
  // Scraping metadata
  sourceUrl       String?
  scrapedAt       DateTime @default(now())
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([permitNumber])
  @@index([city])
  @@index([permitType])
  @@index([issuedDate])
}

